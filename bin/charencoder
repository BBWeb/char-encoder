#!/usr/bin/env node

var util = require('util');
var fs = require('fs');
var path = require('path');
var iconv = require('iconv-lite');
var Q = require('Q');

var commands = require('commander');

var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
var buildVersion = JSON.parse(packageConfig).version;

var isWindows = process.platform == 'win32';

// Specify commander options to parse command line params correctly
commands
  .version(buildVersion, '-v, --version')
  .usage('[options] <source-file>')
  .option('-f, --from [charset]', 'The charset of the input')
  .option('-t, --to [charset]', 'The charset of the output')
  .option('-o, --output [output-file]', 'The file to save to');

commands.parse(process.argv);

var options = {
  from: 'utf8',
  to: 'utf8',
  source: null,
  output: null
};

var fromStdin = !process.env.__DIRECT__ && !process.stdin.isTTY;

// If no sensible data passed in just print help and exit
if (!fromStdin && commands.args.length === 0) {
  commands.outputHelp();
  return 0;
}

// Now coerce commands into char-encoder configuration...
if (commands.from) options.from = commands.from;
if (commands.to) options.to = commands.to;
if (commands.output) options.output = commands.output;
if (commands.args.length > 0) options.source = commands.args;

// Check charsets are supported
if(!iconv.encodingExists(options.from)) {
  console.error('The from charset is not supported: ' + options.from);
  process.exit(1);
}
if(!iconv.encodingExists(options.to)) {
  console.error('The to charset is not supported: ' + options.to)
  process.exit(1);
}

// ... and do the magic!
if (options.source) {
  var promises = options.source.map(function (src) {
    var deferred = Q.defer();

    fs.readFile(src, function(error, data) {
      if (error)
        throw error;

      deferred.resolve(data);
    });

    return deferred.promise;
  });

  Q.all(promises).then(function (res) {
    output(iconv.decode(Buffer.concat(res), options.from));
  });
} else {
  var stdin = process.openStdin();
  var data = new Buffer(0);
  stdin.on('data', function(chunk) {
    data = Buffer.concat([data, chunk]);
  });
  stdin.on('end', function() {
    output(iconv.decode(data, options.from));
  });
}

function output(data) {
  if(options.output) {
    fs.writeFileSync(options.output, iconv.encode(data, options.to));
  } else {
    process.stdout.write(iconv.encode(data, options.to));
  }
}
